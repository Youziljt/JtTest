//重写
overriding
子类对父类重新编写，返回值和行参都不变。重写不允许子类抛出比父类更大的异常。
规则： 参数列表与被重写方法的参数列表必须完全相同：
      访问权限不能比父类低

      super关键字：
      当需要在子类中调用父类被重写方法时，需要时用super关键字。



重载
overloading 方法名相同，而参数不同。返回类型可以相同也可以不用。
            每个重载的方法都必须有一个独一无二的参数类型列表。


方法的重写和重载是java多态性的不用表现。重写是父类与子类之间多态性的一种表现。


多态
多态就是同一个接口，使用不同实例而执行不同操作。
存在的必要三个条件：  继承/重写/父类引用指向子类对象。


抽象类：如果一个类中没有包含足够的信息来描绘，那么该类可以被称为抽象类。
抽象类除了不能实力化，其他功能依旧存在。

抽象方法：如果你想设计一个类，这个类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你就可以在父类中声明该方法为抽象方法。
抽象方法不包含方法体。
使用抽象方法会造成两个结果： 如果该类包含抽象方法，那么该类必须是抽象类。任何子类必须重写父类抽象方法或者声明自身为抽象类。


java封装：减少耦合，类内部结构可自由修改，可以对成员变量进行更精确的控制，隐藏信息，实现细节。
采用 this 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。

接口：
抽象类和接口区别  接口中成员变量------只能是 public static final：
               接口中不能含有静态代码块/静态方法
当声明一个接口时，不必使用abstract，方法也是抽象的不必使用关键字，接口中的方法都是公有的。

枚举：
java枚举是一个特殊的类，一般表示一组常量，比如一年的四季，一个星期的七天，方法东西南北等等。
enum Color
{
    RED, GREEN, BLUE;
}
可以使用迭代for，来迭代元素。  enum 类名。。类名.value（）
values（）返回枚举中的所有值。
ordinal（）方法可以找到每个枚举常量的索引，就像数组索引一样。
valueOf（）方法返回指定字符串值的枚举常量。
















